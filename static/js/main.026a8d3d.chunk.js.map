{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getquickSortAnimations","quickSortHelper","arr","low","high","pi","pivot","temp","partition","SortingVisualizer","props","state","showmsg","arr_size","animation_speed","quickSortDisabled","heapSortDisabled","mergeSortDisabled","bubbleSortDisabled","sliderDisabled","resetArrayDisabled","this","resetArray","randomIntFromInterval","setState","disableAll","arrayBars","document","getElementsByClassName","tooltips","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","tooltip","height","innerHTML","enableAll","n","getBubbleSortAnimations","javaScriptSortedArray","sort","a","b","sortedArray","sortedArray2","console","log","arraysAreEqual","e","target","value","className","type","min","max","data-toggle","data-placement","title","disabled","onChange","handleSizeChange","id","onClick","mergeSort","quickSort","heapSort","bubbleSort","display","testSortingAlgorithms","map","idx","key","position","width","top","left","fontWeight","textAlign","marginTop","marginLeft","React","Component","random","arrayOne","arrayTwo","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.026a8d3d.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return [animations, array];\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\nexport function getquickSortAnimations(array) {\r\n  const animations = [];\r\n  quickSortHelper(array, 0, array.length - 1, animations);\r\n  return [animations, array];\r\n}\r\n\r\nfunction partition(arr, low, high, animations) {\r\n  const pivot = arr[high];\r\n  let i = low - 1; // index of smaller element\r\n  for (let j = low; j < high; j++) {\r\n    // If current element is smaller than the pivot\r\n    animations.push([j, high]);\r\n    animations.push([j, high]);\r\n    if (arr[j] < pivot) {\r\n      i++;\r\n      // swap arr[i] and arr[j]\r\n      animations.push([i, arr[j]]);\r\n      animations.push([j, arr[i]]);\r\n      let temp = arr[i];\r\n      arr[i] = arr[j];\r\n      arr[j] = temp;\r\n    } else {\r\n      animations.push([i + 1, arr[i]]);\r\n      animations.push([j, arr[j]]);\r\n    }\r\n  }\r\n\r\n  // swap arr[i+1] and arr[high] (or pivot)\r\n  animations.push([i + 1, high]);\r\n  animations.push([i + 1, high]);\r\n  animations.push([i + 1, arr[high]]);\r\n  animations.push([high, arr[i + 1]]);\r\n  let temp = arr[i + 1];\r\n  arr[i + 1] = arr[high];\r\n  arr[high] = temp;\r\n\r\n  return i + 1;\r\n}\r\n\r\n/* The main function that implements QuickSort() \r\n      arr[] --> Array to be sorted, \r\n      low  --> Starting index, \r\n      high  --> Ending index */\r\nfunction quickSortHelper(arr, low, high, animations) {\r\n  if (low < high) {\r\n    /* pi is partitioning index, arr[pi] is  \r\n              now at right place */\r\n    let pi = partition(arr, low, high, animations);\r\n\r\n    // Recursively sort elements before\r\n    // partition and after partition\r\n    quickSortHelper(arr, low, pi - 1, animations);\r\n    quickSortHelper(arr, pi + 1, high, animations);\r\n  }\r\n}\r\n\r\nexport function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  const n = array.length;\r\n  for (let i = 0; i < n - 1; i++) {\r\n    for (let j = 0; j < n - i - 1; j++) {\r\n      animations.push([j, j + 1]);\r\n      animations.push([j, j + 1]);\r\n      if (array[j] > array[j + 1]) {\r\n        // swap arr[j+1] and arr[i]\r\n        animations.push([j, array[j + 1]]);\r\n        animations.push([j + 1, array[j]]);\r\n        let temp = array[j];\r\n        array[j] = array[j + 1];\r\n        array[j + 1] = temp;\r\n      } else {\r\n        animations.push([j, array[j]]);\r\n        animations.push([j + 1, array[j + 1]]);\r\n      }\r\n    }\r\n  }\r\n  return [animations, array];\r\n}\r\n","import React from 'react';\r\nimport {\r\n  getMergeSortAnimations,\r\n  getquickSortAnimations,\r\n  getBubbleSortAnimations,\r\n} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport './SortingVisualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\n\r\n// Change this value for the number of bars (value) in the array.\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'PALETURQUOISE';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'orangered';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n      showmsg: false,\r\n      arr_size: 50,\r\n      animation_speed: 1,\r\n      quickSortDisabled: false,\r\n      heapSortDisabled: false,\r\n      mergeSortDisabled: false,\r\n      bubbleSortDisabled: false,\r\n      sliderDisabled: false,\r\n      resetArrayDisabled: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < this.state.arr_size; i++) {\r\n      array.push(randomIntFromInterval(1, 400));\r\n    }\r\n    this.setState({ array: array });\r\n  }\r\n\r\n  disableAll() {\r\n    this.setState({\r\n      quickSortDisabled: true,\r\n      heapSortDisabled: true,\r\n      mergeSortDisabled: true,\r\n      bubbleSortDisabled: true,\r\n      sliderDisabled: true,\r\n      resetArrayDisabled: true\r\n    });\r\n  }\r\n  enableAll() {\r\n    this.setState({\r\n      quickSortDisabled: false,\r\n      heapSortDisabled: false,\r\n      mergeSortDisabled: false,\r\n      bubbleSortDisabled: false,\r\n      sliderDisabled: false,\r\n      resetArrayDisabled: false\r\n    });\r\n  }\r\n  mergeSort() {\r\n    this.disableAll();\r\n    const [animations, temp] = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const tooltips = document.getElementsByClassName('tooltiptext');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.animation_speed);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const tooltip = tooltips[barOneIdx];\r\n          barOneStyle.height = `${newHeight}px`;\r\n          tooltip.innerHTML = newHeight;\r\n          if (i == animations.length - 1)\r\n            this.enableAll();\r\n        }, i * this.state.animation_speed);\r\n      }\r\n    }\r\n    //this.enableAll();\r\n  }\r\n\r\n  quickSort() {\r\n    this.disableAll();\r\n    const [animations, temp] = getquickSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const tooltips = document.getElementsByClassName('tooltiptext');\r\n      const isColorChange = i % 4 < 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.animation_speed);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const tooltip = tooltips[barOneIdx];\r\n          barOneStyle.height = `${newHeight}px`;\r\n          tooltip.innerHTML = newHeight;\r\n          if (i == animations.length - 1)\r\n            this.enableAll();\r\n        }, i * this.state.animation_speed);\r\n      }\r\n    }\r\n    /* document.getElementById(\"slider\").disabled = false;\r\n     document.getElementById(\"resetArray\").disabled = false;\r\n     document.getElementById(\"quickSort\").disabled = false;\r\n     document.getElementById(\"bubbleSort\").disabled = false;\r\n     document.getElementById(\"mergeSort\").disabled = false;\r\n     document.getElementById(\"heapSort\").disabled = false;*/\r\n\r\n  }\r\n\r\n  afterSort() {\r\n\r\n  }\r\n\r\n  heapSort() { }\r\n\r\n  bubbleSort() {\r\n    this.disableAll();\r\n    this.setState({ showmsg: true });\r\n    setTimeout(() => { this.setState({ showmsg: false }); }, 3000);\r\n    const [animations, temp] = getBubbleSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const tooltips = document.getElementsByClassName('tooltiptext');\r\n      const isColorChange = i % 4 < 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.animation_speed);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const tooltip = tooltips[barOneIdx];\r\n          barOneStyle.height = `${newHeight}px`;\r\n          tooltip.innerHTML = newHeight;\r\n          if (i == animations.length - 1)\r\n            this.enableAll();\r\n        }, i * this.state.animation_speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  // NOTE: This method will only work if your sorting algorithms actually return\r\n  // the sorted arrays; if they return the animations (as they currently do), then\r\n  // this method will be broken.\r\n  testSortingAlgorithms() {\r\n    for (let i = 0; i < 100; i++) {\r\n      const array = [];\r\n      const length = 100;\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(-1000, 1000));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      const [tempArray, sortedArray] = getMergeSortAnimations(array);\r\n      const [tempArray2, sortedArray2] = getquickSortAnimations(array);\r\n\r\n      console.log(arraysAreEqual(javaScriptSortedArray, sortedArray));\r\n      console.log(arraysAreEqual(javaScriptSortedArray, sortedArray2));\r\n    }\r\n  }\r\n\r\n  handleSizeChange(e) {\r\n    let obj = {};\r\n    this.setState({ arr_size: e.target.value });\r\n    //this.setState(obj);\r\n    this.resetArray();\r\n    console.log(this.state.arr_size);\r\n  }\r\n  //<div className=\"tooltiptext\">{this.state.arr_size}</div>\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <div className=\"grid-container\">\r\n        <div className=\"header\">\r\n          <div>\r\n            <div className=\"input-range\">\r\n              <p><b>Array Size: </b></p>\r\n              <input\r\n                type=\"range\"\r\n                min=\"5\"\r\n                max=\"200\" data-toggle=\"tooltip\" data-placement=\"left\" title={this.state.arr_size}\r\n                className=\"input-range\"\r\n                disabled={this.state.sliderDisabled}\r\n                value={this.state.arr_size}\r\n                onChange={e => {\r\n                  this.handleSizeChange(e);\r\n                }}\r\n                id=\"slider\" />\r\n            </div>\r\n            <button\r\n              id=\"resetArray\"\r\n              className=\"btn btn-dark\"\r\n              disabled={this.state.resetArrayDisabled}\r\n              type=\"button\"\r\n              onClick={() => this.resetArray()}>\r\n              New Random List\r\n            </button>\r\n          </div>\r\n          <div>\r\n            <button id=\"mergeSort\" disabled={this.state.mergeSortDisabled}\r\n              className=\"btn btn-info\" onClick={() => this.mergeSort()}>\r\n              Merge Sort\r\n        </button>\r\n          </div>\r\n          <div>\r\n            <button id=\"quickSort\" disabled={this.state.quickSortDisabled}\r\n              className=\"btn btn-info\" onClick={() => this.quickSort()}>\r\n              Quick Sort\r\n        </button>\r\n          </div>\r\n          <div>\r\n            <button id=\"heapSort\" disabled={this.state.heapSortDisabled}\r\n              className=\"btn btn-info\" onClick={() => this.heapSort()}>\r\n              Heap Sort\r\n        </button>\r\n          </div>\r\n          <div>\r\n            <button id=\"bubbleSort\" disabled={this.state.bubbleSortDisabled}\r\n              className=\"btn btn-info\" onClick={() => this.bubbleSort()}>\r\n              Bubble Sort\r\n        </button></div>\r\n          <button\r\n            className=\"btn btn-warning\"\r\n            style={{ display: 'none' }}\r\n            onClick={() => this.testSortingAlgorithms()}>\r\n            Test\r\n        </button>\r\n        </div>\r\n        <div className=\"middle\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={idx}\r\n              style={{\r\n                backgroundColor: PRIMARY_COLOR,\r\n                height: `${value}px`,\r\n              }}>\r\n              <div className=\"tooltiptext\">{value}</div>\r\n            </div>\r\n          ))}\r\n          <br />\r\n\r\n          <div\r\n            id=\"msg\"\r\n            style={{\r\n              display: this.state.showmsg ? 'block' : 'None',\r\n              position: `fixed`,\r\n              width: `500px`,\r\n              height: `100px`,\r\n              top: `50%`,\r\n              left: `50%`,\r\n              color: `gray`,\r\n              fontWeight: 'bold',\r\n              backgroundColor: 'cyan',\r\n              textAlign: 'center',\r\n              marginTop: `-100px`,\r\n              marginLeft: `-250px`,\r\n            }}>\r\n            SPOILERS! BubbleSort is a bit slow --> O(N^2)\r\n        </div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","import React from 'react';\r\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SortingVisualizer></SortingVisualizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
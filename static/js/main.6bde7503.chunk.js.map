{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getquickSortAnimations","quickSortHelper","arr","low","high","pi","pivot","temp","partition","SortingVisualizer","props","state","showmsg","arr_size","animation_speed","this","resetArray","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","tooltips","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","tooltip","height","innerHTML","n","getBubbleSortAnimations","javaScriptSortedArray","sort","a","b","sortedArray","sortedArray2","console","log","arraysAreEqual","e","target","value","className","map","idx","key","type","onClick","mergeSort","quickSort","heapSort","bubbleSort","min","max","onChange","handleSizeChange","width","position","id","display","testSortingAlgorithms","top","left","fontWeight","textAlign","marginTop","marginLeft","React","Component","random","arrayOne","arrayTwo","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6bde7503.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return [animations, array];\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\nexport function getquickSortAnimations(array) {\n  const animations = [];\n  quickSortHelper(array, 0, array.length - 1, animations);\n  return [animations, array];\n}\n\nfunction partition(arr, low, high, animations) {\n  const pivot = arr[high];\n  let i = low - 1; // index of smaller element\n  for (let j = low; j < high; j++) {\n    // If current element is smaller than the pivot\n    animations.push([j, high]);\n    animations.push([j, high]);\n    if (arr[j] < pivot) {\n      i++;\n      // swap arr[i] and arr[j]\n      animations.push([i, arr[j]]);\n      animations.push([j, arr[i]]);\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    } else {\n      animations.push([i + 1, arr[i]]);\n      animations.push([j, arr[j]]);\n    }\n  }\n\n  // swap arr[i+1] and arr[high] (or pivot)\n  animations.push([i + 1, high]);\n  animations.push([i + 1, high]);\n  animations.push([i + 1, arr[high]]);\n  animations.push([high, arr[i + 1]]);\n  let temp = arr[i + 1];\n  arr[i + 1] = arr[high];\n  arr[high] = temp;\n\n  return i + 1;\n}\n\n/* The main function that implements QuickSort() \n      arr[] --> Array to be sorted, \n      low  --> Starting index, \n      high  --> Ending index */\nfunction quickSortHelper(arr, low, high, animations) {\n  if (low < high) {\n    /* pi is partitioning index, arr[pi] is  \n              now at right place */\n    let pi = partition(arr, low, high, animations);\n\n    // Recursively sort elements before\n    // partition and after partition\n    quickSortHelper(arr, low, pi - 1, animations);\n    quickSortHelper(arr, pi + 1, high, animations);\n  }\n}\n\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n  const n = array.length;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      animations.push([j, j + 1]);\n      animations.push([j, j + 1]);\n      if (array[j] > array[j + 1]) {\n        // swap arr[j+1] and arr[i]\n        animations.push([j, array[j + 1]]);\n        animations.push([j + 1, array[j]]);\n        let temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n      } else {\n        animations.push([j, array[j]]);\n        animations.push([j + 1, array[j + 1]]);\n      }\n    }\n  }\n  return [animations, array];\n}\n","import React from 'react';\nimport {\n  getMergeSortAnimations,\n  getquickSortAnimations,\n  getBubbleSortAnimations,\n} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\n\n// Change this value for the number of bars (value) in the array.\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'PALETURQUOISE';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'orangered';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      showmsg: false,\n      arr_size: 50,\n      animation_speed: 1,\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < this.state.arr_size; i++) {\n      array.push(randomIntFromInterval(5, 600));\n    }\n    this.setState({array: array});\n  }\n\n  mergeSort() {\n    const [animations, temp] = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const tooltips = document.getElementsByClassName('tooltiptext');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.animation_speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const tooltip = tooltips[barOneIdx];\n          barOneStyle.height = `${newHeight}px`;\n          tooltip.innerHTML = newHeight;\n        }, i * this.state.animation_speed);\n      }\n    }\n  }\n\n  quickSort() {\n    const [animations, temp] = getquickSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const tooltips = document.getElementsByClassName('tooltiptext');\n      const isColorChange = i % 4 < 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.animation_speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const tooltip = tooltips[barOneIdx];\n          barOneStyle.height = `${newHeight}px`;\n          tooltip.innerHTML = newHeight;\n        }, i * this.state.animation_speed);\n      }\n    }\n  }\n\n  heapSort() {}\n\n  bubbleSort() {\n    this.setState({showmsg: true});\n    setTimeout(() => {}, 2000);\n    //this.setState({showmsg: false});\n\n    const [animations, temp] = getBubbleSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const tooltips = document.getElementsByClassName('tooltiptext');\n      const isColorChange = i % 4 < 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.animation_speed);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const tooltip = tooltips[barOneIdx];\n          barOneStyle.height = `${newHeight}px`;\n          tooltip.innerHTML = newHeight;\n        }, i * this.state.animation_speed);\n      }\n    }\n  }\n\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = 100;\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const [tempArray, sortedArray] = getMergeSortAnimations(array);\n      const [tempArray2, sortedArray2] = getquickSortAnimations(array);\n\n      console.log(arraysAreEqual(javaScriptSortedArray, sortedArray));\n      console.log(arraysAreEqual(javaScriptSortedArray, sortedArray2));\n    }\n  }\n\n  handleSizeChange(e) {\n    let obj = {};\n    this.setState({arr_size: e.target.value});\n    //this.setState(obj);\n    this.resetArray();\n    console.log(this.state.arr_size);\n  }\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}>\n            <div className=\"tooltiptext\">{value}</div>\n          </div>\n        ))}\n        <br />\n        <button\n          className=\"btn btn-dark\"\n          type=\"button\"\n          onClick={() => this.resetArray()}>\n          New Random List\n        </button>\n        <button className=\"btn btn-info\" onClick={() => this.mergeSort()}>\n          Merge Sort\n        </button>\n        <button className=\"btn btn-info\" onClick={() => this.quickSort()}>\n          Quick Sort\n        </button>\n        <button className=\"btn btn-info\" onClick={() => this.heapSort()}>\n          Heap Sort\n        </button>\n        <button className=\"btn btn-info\" onClick={() => this.bubbleSort()}>\n          Bubble Sort\n        </button>{' '}\n        <hr></hr>\n        <input\n          type=\"range\"\n          min=\"5\"\n          max=\"200\"\n          value={this.state.arr_size}\n          onChange={e => {\n            this.handleSizeChange(e);\n          }}\n          className=\"form-control-range\"\n          style={{width: '200px', position: 'absolute'}}\n          id=\"slider\"></input>\n        <button\n          className=\"btn btn-warning\"\n          style={{display: 'none'}}\n          onClick={() => this.testSortingAlgorithms()}>\n          Test\n        </button>\n        <div\n          id=\"msg\"\n          style={{\n            display: this.state.showmsg ? 'block' : 'None',\n            position: `fixed`,\n            width: `500px`,\n            height: `200px`,\n            top: `50%`,\n            left: `50%`,\n            color: `gray`,\n            fontWeight: 'bold',\n            backgroundColor: 'cyan',\n            textAlign: 'center',\n            marginTop: `-100px`,\n            marginLeft: `-250px`,\n          }}>\n          Don't Hold your Breath!\n        </div>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}